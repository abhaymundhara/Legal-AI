import logging
import os
from dotenv import load_dotenv
from groq import Groq

# Load environment variables
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("legal_maxim_decoder")

def query_legal_maxim(maxim):
    """
    Queries Groq's LLaMA model to decode and explain the given legal maxim.

    Args:
        maxim (str): The legal maxim to decode.

    Returns:
        str: The explanation generated by the LLaMA model.
    """
    if not GROQ_API_KEY:
        logger.error("GROQ_API_KEY is not set. Please check your .env file.")
        return "Error: Missing API Key."

    # Instantiate Groq client
    client = Groq(api_key=GROQ_API_KEY)

    # Define the prompt for decoding legal maxims
    prompt = (
        "You are a legal expert specializing in explaining legal maxims. "
        "Your task is to provide a clear and concise explanation of the given legal maxim, "
        "along with its practical application in law. Keep your explanation simple and to the point.\n\n"
        f"Legal Maxim: {maxim}\n\nExplanation:"
    )

    try:
        # Query the LLaMA model
        logger.info(f"Querying Groq API for maxim: {maxim}")
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": "You are a legal AI assistant specializing in legal maxims."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.6,
            max_tokens=1500,
            top_p=0.95,
        )

        # Extract the response text
        explanation = response.choices[0].message.content.strip()
        logger.info("Successfully received response from Groq API.")
        return explanation

    except Exception as e:
        logger.error(f"Error while querying Groq API: {str(e)}")
        return f"Error: Unable to decode the legal maxim. Details: {str(e)}"


def legal_maxim_decoder():
    """
    Function to accept input, decode the legal maxim, and display the output.
    """
    print("\n--- Legal Maxim Decoder ---")
    maxim = input("Enter a legal maxim (e.g., 'res ipsa loquitur'): ").strip()

    if not maxim:
        print("‚ö†Ô∏è Please enter a valid legal maxim.")
        return

    print("\nüîç Decoding the legal maxim...")
    explanation = query_legal_maxim(maxim)

    if explanation.startswith("Error"):
        print(f"\n‚ùå {explanation}")
    else:
        print("\n‚úÖ Explanation:")
        print(explanation)


if __name__ == "__main__":
    legal_maxim_decoder()
